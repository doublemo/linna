// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api_grpc.proto

package pb

import (
	context "context"
	api "github.com/doublemo/nana/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinnaClient is the client API for Linna service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinnaClient interface {
	SessionRefresh(ctx context.Context, in *api.SessionRefreshRequest, opts ...grpc.CallOption) (*api.Session, error)
}

type linnaClient struct {
	cc grpc.ClientConnInterface
}

func NewLinnaClient(cc grpc.ClientConnInterface) LinnaClient {
	return &linnaClient{cc}
}

func (c *linnaClient) SessionRefresh(ctx context.Context, in *api.SessionRefreshRequest, opts ...grpc.CallOption) (*api.Session, error) {
	out := new(api.Session)
	err := c.cc.Invoke(ctx, "/linna.api.Linna/SessionRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinnaServer is the server API for Linna service.
// All implementations must embed UnimplementedLinnaServer
// for forward compatibility
type LinnaServer interface {
	SessionRefresh(context.Context, *api.SessionRefreshRequest) (*api.Session, error)
	mustEmbedUnimplementedLinnaServer()
}

// UnimplementedLinnaServer must be embedded to have forward compatible implementations.
type UnimplementedLinnaServer struct {
}

func (UnimplementedLinnaServer) SessionRefresh(context.Context, *api.SessionRefreshRequest) (*api.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionRefresh not implemented")
}
func (UnimplementedLinnaServer) mustEmbedUnimplementedLinnaServer() {}

// UnsafeLinnaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinnaServer will
// result in compilation errors.
type UnsafeLinnaServer interface {
	mustEmbedUnimplementedLinnaServer()
}

func RegisterLinnaServer(s grpc.ServiceRegistrar, srv LinnaServer) {
	s.RegisterService(&Linna_ServiceDesc, srv)
}

func _Linna_SessionRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.SessionRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinnaServer).SessionRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linna.api.Linna/SessionRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinnaServer).SessionRefresh(ctx, req.(*api.SessionRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Linna_ServiceDesc is the grpc.ServiceDesc for Linna service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Linna_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linna.api.Linna",
	HandlerType: (*LinnaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionRefresh",
			Handler:    _Linna_SessionRefresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_grpc.proto",
}
